//! # `DBus` interface proxy for: `org.a11y.atspi.Application`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from `DBus` introspection data.
//! Source: `Application.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.a11y.atspi.Application", assume_defaults = true)]
trait Application {
	/// DeregisterEventListener method
	fn deregister_event_listener(&self, event: &str) -> zbus::Result<()>;

	/// GetLocale method
	fn get_locale(&self, lctype: u32) -> zbus::Result<String>;

	/// RegisterEventListener method
	fn register_event_listener(&self, event: &str) -> zbus::Result<()>;

	/// AtspiVersion property
	#[dbus_proxy(property)]
	fn atspi_version(&self) -> zbus::Result<String>;

	/// Id property
	#[dbus_proxy(property)]
	fn id(&self) -> zbus::Result<i32>;
	#[dbus_proxy(property)]
	fn set_id(&self, value: i32) -> zbus::Result<()>;

	/// ToolkitName property
	#[dbus_proxy(property)]
	fn toolkit_name(&self) -> zbus::Result<String>;

	/// Version property
	#[dbus_proxy(property)]
	fn version(&self) -> zbus::Result<String>;
}
use crate::{AtspiProxy, Interface};
impl<'a> AtspiProxy for ApplicationProxy<'a> {
	const INTERFACE: Interface = Interface::Application;
}
