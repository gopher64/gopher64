// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { CheckBox, ComboBox, Button, HorizontalBox, VerticalBox, GridBox } from "std-widgets.slint";
import { Page } from "page.slint";

export global ControllerData {
    in-out property <bool> emulate_vru;
    in-out property <[bool]> controller_enabled;
    in-out property <[bool]> transferpak;
}

export component ControllerConfig inherits Page {
    property <[{name: string, vru-enabled: bool}]> rows: [
        { name: "1", vru-enabled: false },
        { name: "2", vru-enabled: false },
        { name: "3", vru-enabled: false },
        { name: "4", vru-enabled: true }
    ];

    callback input_profile_button_clicked;
    title: @tr("Controller Configuration");

    VerticalBox {
        alignment: start;
        HorizontalBox {
            alignment: start;
            Button {
                text: @tr("Configure Input Profile");
                clicked => {
                    input_profile_button_clicked();
                }
            }
        }

        Rectangle { }

        Text {
            text: @tr("Controller Settings:");
            font-weight: 600;
        }

        GridBox {
            Row {
                Text {
                    text: @tr("Port");
                }

                Text {
                    text: @tr("Enabled");
                }

                Text {
                    text: @tr("Emulate VRU");
                }

                Text {
                    text: @tr("Transfer Pak");
                }

                Text {
                    text: @tr("Profile");
                }

                Text {
                    text: @tr("Controller");
                }
            }

            Row { // 0
                property <int> number: 0;
                Text { // Port
                    text: rows[number].name;
                    vertical-alignment: center;
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Enabled
                        checked: ControllerData.controller_enabled[number];
                        toggled => {
                            ControllerData.controller_enabled[number] = self.checked;
                        }
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Emulate VRU
                        checked: false;
                        enabled: rows[number].vru-enabled;
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Transfer Pak
                        checked: ControllerData.transferpak[number];
                        toggled => {
                            ControllerData.transferpak[number] = self.checked;
                        }
                    }
                }

                ComboBox { // Profile
                    model: ["Default", "Profile 1", "Profile 2"];
                    current-value: "Default";
                }

                ComboBox { // Controller
                    model: ["Controller 1", "Controller 2", "Controller 3"];
                    current-value: "Controller 1";
                }
            }

            Row { // 1
                property <int> number: 1;
                Text { // Port
                    text: rows[number].name;
                    vertical-alignment: center;
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Enabled
                        checked: ControllerData.controller_enabled[number];
                        toggled => {
                            ControllerData.controller_enabled[number] = self.checked;
                        }
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Emulate VRU
                        checked: false;
                        enabled: rows[number].vru-enabled;
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Transfer Pak
                        checked: ControllerData.transferpak[number];
                        toggled => {
                            ControllerData.transferpak[number] = self.checked;
                        }
                    }
                }

                ComboBox { // Profile
                    model: ["Default", "Profile 1", "Profile 2"];
                    current-value: "Default";
                }

                ComboBox { // Controller
                    model: ["Controller 1", "Controller 2", "Controller 3"];
                    current-value: "Controller 1";
                }
            }

            Row { // 2
                property <int> number: 2;
                Text { // Port
                    text: rows[number].name;
                    vertical-alignment: center;
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Enabled
                        checked: ControllerData.controller_enabled[number];
                        toggled => {
                            ControllerData.controller_enabled[number] = self.checked;
                        }
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Emulate VRU
                        checked: false;
                        enabled: rows[number].vru-enabled;
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Transfer Pak
                        checked: ControllerData.transferpak[number];
                        toggled => {
                            ControllerData.transferpak[number] = self.checked;
                        }
                    }
                }

                ComboBox { // Profile
                    model: ["Default", "Profile 1", "Profile 2"];
                    current-value: "Default";
                }

                ComboBox { // Controller
                    model: ["Controller 1", "Controller 2", "Controller 3"];
                    current-value: "Controller 1";
                }
            }

            Row { // 3
                property <int> number: 3;
                Text { // Port
                    text: rows[number].name;
                    vertical-alignment: center;
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Enabled
                        checked: ControllerData.controller_enabled[number];
                        toggled => {
                            ControllerData.controller_enabled[number] = self.checked;
                        }
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Emulate VRU
                        enabled: rows[number].vru-enabled;
                        checked: ControllerData.emulate_vru;
                        toggled => {
                            ControllerData.emulate_vru = self.checked;
                        }
                    }
                }

                HorizontalBox {
                    alignment: center;
                    CheckBox { // Transfer Pak
                       checked: ControllerData.transferpak[number];
                        toggled => {
                            ControllerData.transferpak[number] = self.checked;
                        }
                    }
                }

                ComboBox { // Profile
                    model: ["Default", "Profile 1", "Profile 2"];
                    current-value: "Default";
                }

                ComboBox { // Controller
                    model: ["Controller 1", "Controller 2", "Controller 3"];
                    current-value: "Controller 1";
                }
            }
        }
    }
}
